import streamlit as st
import pydeck as pdk
import streamlit.components.v1 as components
from openai import OpenAI, Client
from streamlit_lottie import st_lottie
# from streamlit_extras.add_vertical_space import add_vertical_space
import os
import json

# Access the OpenAI API key from Streamlit secrets
# api_key = st.secrets["OPENAI_API_KEY"]

def app():
    st.title("–ö–∞—Ä—Ç–∞ –ê–ª–º–∞—Ç—ã")
    if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"):
        st.session_state.current_page = "–ì–ª–∞–≤–Ω–∞—è"
    # HTML-–∫–æ–¥ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –∏ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    mapbox_iframe_html = """
    <iframe id="mapboxIframe" width='100%' height='400px' src="https://api.mapbox.com/styles/v1/alinach/clrn3kwk7004501pl7mddfpzb.html?title=false&access_token=pk.eyJ1IjoiYWxpbmFjaCIsImEiOiJjbGlpcnZpaTgwMTZ4M2twaGo1NjRsNHhhIn0.9jw_R_D1i1nqOtaolld-dQ&zoomwheel=false#17/43.23546/76.903217/47.5/74" title="one" style="border:none;"></iframe>
    <button onclick="toggleFullscreen()" style="padding: 10px 20px; font-size: 16px; cursor: pointer; border: none; border-radius: 5px; background-color: #ACACAD; color: #ECEBE5;">–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º</button>
    <script>
        function toggleFullscreen() {
            var iframe = document.getElementById('mapboxIframe');
            if (!document.fullscreenElement) {
                iframe.requestFullscreen().catch(err => {
                    alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${err.message}`);
                });
            } else {
                document.exitFullscreen();
            }
        }
    </script>
    """

    # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ HTML-–∫–æ–¥–∞ –∫–∞—Ä—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit
    components.html(mapbox_iframe_html, height=450)

    
    st.subheader("–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≥–æ—Ä–æ–¥–∞")

    with st.sidebar:
        openai_api_key = st.text_input("OpenAI API Key", key="chatbot_api_key", type="password")
        "[Get an OpenAI API key](https://platform.openai.com/account/api-keys)"
        "[View the source code](https://github.com/streamlit/llm-examples/blob/main/Chatbot.py)"
        "[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/streamlit/llm-examples?quickstart=1)"
        with open("data/bot.json", "r", errors='ignore') as f:
            data = json.load(f)
        st_lottie(data)


    st.title("üìé –ë–æ—Ç-—É—Ä–±–∞–Ω–∏—Å—Ç")
    st.caption("üí≠ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ –≥–æ—Ä–æ–¥–µ")

    if "messages" not in st.session_state:
        st.session_state["messages"] = [{"role": "assistant", "content": "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≥–æ—Ä–æ–¥–µ –ê–ª–º–∞—Ç—ã?"}]

    for msg in st.session_state.messages:
        st.chat_message(msg["role"]).write(msg["content"])

    if prompt := st.chat_input():
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –≥–æ—Ä–æ–¥–µ –ê–ª–º–∞—Ç—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt + " –æ –≥–æ—Ä–æ–¥–µ –ê–ª–º–∞—Ç—ã"})
        st.chat_message("user").write(prompt)

        try:
            client = OpenAI(api_key=openai_api_key)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º api_key, —Ç–∞–∫ –∫–∞–∫ openai_api_key —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ –≥–æ—Ä–æ–¥–µ –ê–ª–º–∞—Ç—ã
            response = client.chat.completions.create(model="gpt-3.5-turbo-0125", messages=st.session_state.messages)
            msg = response.choices[0].message.content
            st.session_state.messages.append({"role": "assistant", "content": msg})
            st.chat_message("assistant").write(msg)
        except Exception as e:
            st.error(f"OpenAI Error: {e}")
